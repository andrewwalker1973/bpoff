'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsCase
    Inherits DataSet
    
    Private table_Case As _CaseDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Case")) Is Nothing) Then
                Me.Tables.Add(New _CaseDataTable(ds.Tables("Case")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Case As _CaseDataTable
        Get
            Return Me.table_Case
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsCase = CType(MyBase.Clone,dsCase)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Case")) Is Nothing) Then
            Me.Tables.Add(New _CaseDataTable(ds.Tables("Case")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.table_Case = CType(Me.Tables("Case"),_CaseDataTable)
        If (Not (Me.table_Case) Is Nothing) Then
            Me.table_Case.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsCase"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsCase.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-ZA")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.table_Case = New _CaseDataTable
        Me.Tables.Add(Me.table_Case)
    End Sub
    
    Private Function ShouldSerialize_Case() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub _CaseRowChangeEventHandler(ByVal sender As Object, ByVal e As _CaseRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _CaseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnid As DataColumn
        
        Private columnWFId As DataColumn
        
        Private columnUACFId As DataColumn
        
        Private columnSubject As DataColumn
        
        Private columnConsCode As DataColumn
        
        Private columnConNo As DataColumn
        
        Private columnCat As DataColumn
        
        Private columnSubCat As DataColumn
        
        Private columnStatus As DataColumn
        
        Friend Sub New()
            MyBase.New("Case")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property idColumn As DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        Friend ReadOnly Property WFIdColumn As DataColumn
            Get
                Return Me.columnWFId
            End Get
        End Property
        
        Friend ReadOnly Property UACFIdColumn As DataColumn
            Get
                Return Me.columnUACFId
            End Get
        End Property
        
        Friend ReadOnly Property SubjectColumn As DataColumn
            Get
                Return Me.columnSubject
            End Get
        End Property
        
        Friend ReadOnly Property ConsCodeColumn As DataColumn
            Get
                Return Me.columnConsCode
            End Get
        End Property
        
        Friend ReadOnly Property ConNoColumn As DataColumn
            Get
                Return Me.columnConNo
            End Get
        End Property
        
        Friend ReadOnly Property CatColumn As DataColumn
            Get
                Return Me.columnCat
            End Get
        End Property
        
        Friend ReadOnly Property SubCatColumn As DataColumn
            Get
                Return Me.columnSubCat
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _CaseRow
            Get
                Return CType(Me.Rows(index),_CaseRow)
            End Get
        End Property
        
        Public Event _CaseRowChanged As _CaseRowChangeEventHandler
        
        Public Event _CaseRowChanging As _CaseRowChangeEventHandler
        
        Public Event _CaseRowDeleted As _CaseRowChangeEventHandler
        
        Public Event _CaseRowDeleting As _CaseRowChangeEventHandler
        
        Public Overloads Sub Add_CaseRow(ByVal row As _CaseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_CaseRow(ByVal id As Integer, ByVal WFId As Integer, ByVal UACFId As String, ByVal Subject As String, ByVal ConsCode As String, ByVal ConNo As String, ByVal Cat As String, ByVal SubCat As String, ByVal Status As Integer) As _CaseRow
            Dim row_CaseRow As _CaseRow = CType(Me.NewRow,_CaseRow)
            row_CaseRow.ItemArray = New Object() {id, WFId, UACFId, Subject, ConsCode, ConNo, Cat, SubCat, Status}
            Me.Rows.Add(row_CaseRow)
            Return row_CaseRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _CaseDataTable = CType(MyBase.Clone,_CaseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _CaseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnid = Me.Columns("id")
            Me.columnWFId = Me.Columns("WFId")
            Me.columnUACFId = Me.Columns("UACFId")
            Me.columnSubject = Me.Columns("Subject")
            Me.columnConsCode = Me.Columns("ConsCode")
            Me.columnConNo = Me.Columns("ConNo")
            Me.columnCat = Me.Columns("Cat")
            Me.columnSubCat = Me.Columns("SubCat")
            Me.columnStatus = Me.Columns("Status")
        End Sub
        
        Private Sub InitClass()
            Me.columnid = New DataColumn("id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnid)
            Me.columnWFId = New DataColumn("WFId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWFId)
            Me.columnUACFId = New DataColumn("UACFId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUACFId)
            Me.columnSubject = New DataColumn("Subject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubject)
            Me.columnConsCode = New DataColumn("ConsCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConsCode)
            Me.columnConNo = New DataColumn("ConNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConNo)
            Me.columnCat = New DataColumn("Cat", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCat)
            Me.columnSubCat = New DataColumn("SubCat", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubCat)
            Me.columnStatus = New DataColumn("Status", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
        End Sub
        
        Public Function New_CaseRow() As _CaseRow
            Return CType(Me.NewRow,_CaseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _CaseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_CaseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._CaseRowChangedEvent) Is Nothing) Then
                RaiseEvent _CaseRowChanged(Me, New _CaseRowChangeEvent(CType(e.Row,_CaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._CaseRowChangingEvent) Is Nothing) Then
                RaiseEvent _CaseRowChanging(Me, New _CaseRowChangeEvent(CType(e.Row,_CaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._CaseRowDeletedEvent) Is Nothing) Then
                RaiseEvent _CaseRowDeleted(Me, New _CaseRowChangeEvent(CType(e.Row,_CaseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._CaseRowDeletingEvent) Is Nothing) Then
                RaiseEvent _CaseRowDeleting(Me, New _CaseRowChangeEvent(CType(e.Row,_CaseRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_CaseRow(ByVal row As _CaseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _CaseRow
        Inherits DataRow
        
        Private table_Case As _CaseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Case = CType(Me.Table,_CaseDataTable)
        End Sub
        
        Public Property id As Integer
            Get
                Try 
                    Return CType(Me(Me.table_Case.idColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.idColumn) = value
            End Set
        End Property
        
        Public Property WFId As Integer
            Get
                Try 
                    Return CType(Me(Me.table_Case.WFIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.WFIdColumn) = value
            End Set
        End Property
        
        Public Property UACFId As String
            Get
                Try 
                    Return CType(Me(Me.table_Case.UACFIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.UACFIdColumn) = value
            End Set
        End Property
        
        Public Property Subject As String
            Get
                Try 
                    Return CType(Me(Me.table_Case.SubjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.SubjectColumn) = value
            End Set
        End Property
        
        Public Property ConsCode As String
            Get
                Try 
                    Return CType(Me(Me.table_Case.ConsCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.ConsCodeColumn) = value
            End Set
        End Property
        
        Public Property ConNo As String
            Get
                Try 
                    Return CType(Me(Me.table_Case.ConNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.ConNoColumn) = value
            End Set
        End Property
        
        Public Property Cat As String
            Get
                Try 
                    Return CType(Me(Me.table_Case.CatColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.CatColumn) = value
            End Set
        End Property
        
        Public Property SubCat As String
            Get
                Try 
                    Return CType(Me(Me.table_Case.SubCatColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.SubCatColumn) = value
            End Set
        End Property
        
        Public Property Status As Integer
            Get
                Try 
                    Return CType(Me(Me.table_Case.StatusColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Case.StatusColumn) = value
            End Set
        End Property
        
        Public Function IsidNull() As Boolean
            Return Me.IsNull(Me.table_Case.idColumn)
        End Function
        
        Public Sub SetidNull()
            Me(Me.table_Case.idColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWFIdNull() As Boolean
            Return Me.IsNull(Me.table_Case.WFIdColumn)
        End Function
        
        Public Sub SetWFIdNull()
            Me(Me.table_Case.WFIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUACFIdNull() As Boolean
            Return Me.IsNull(Me.table_Case.UACFIdColumn)
        End Function
        
        Public Sub SetUACFIdNull()
            Me(Me.table_Case.UACFIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubjectNull() As Boolean
            Return Me.IsNull(Me.table_Case.SubjectColumn)
        End Function
        
        Public Sub SetSubjectNull()
            Me(Me.table_Case.SubjectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConsCodeNull() As Boolean
            Return Me.IsNull(Me.table_Case.ConsCodeColumn)
        End Function
        
        Public Sub SetConsCodeNull()
            Me(Me.table_Case.ConsCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConNoNull() As Boolean
            Return Me.IsNull(Me.table_Case.ConNoColumn)
        End Function
        
        Public Sub SetConNoNull()
            Me(Me.table_Case.ConNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCatNull() As Boolean
            Return Me.IsNull(Me.table_Case.CatColumn)
        End Function
        
        Public Sub SetCatNull()
            Me(Me.table_Case.CatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubCatNull() As Boolean
            Return Me.IsNull(Me.table_Case.SubCatColumn)
        End Function
        
        Public Sub SetSubCatNull()
            Me(Me.table_Case.SubCatColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.table_Case.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.table_Case.StatusColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _CaseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _CaseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _CaseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _CaseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
